{
    "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
    "name": "NetLinx",
    "scopeName": "source.netlinx",
    "fileTypes": ["axs", "axi"],
    "patterns": [
        {
            "include": "#programName"
        },
        {
            "include": "#moduleName"
        },
        {
            "include": "#sectionDefinitions"
        },
        {
            "include": "#procedureDefinitions"
        },
        {
            "include": "#comments"
        },
        {
            "include": "#preprocessor"
        },
        {
            "include": "#strings"
        },
        {
            "include": "#controlFlow"
        },
        {
            "include": "#constants"
        },
        {
            "include": "#types"
        },
        {
            "include": "#operators"
        },
        {
            "include": "#variables"
        }
    ],
    "repository": {
        "programName": {
            "match": "(?i)\\b(program_name)\\b",
            "captures": {
                "1": {
                    "name": "entity.name.section.program.netlinx"
                }
            }
        },
        "moduleName": {
            "match": "(?i)\\b(module_name)\\b",
            "captures": {
                "1": {
                    "name": "entity.name.section.module.netlinx"
                }
            }
        },
        "sectionDefinitions": {
            "patterns": [
                {
                    "name": "entity.name.section.netlinx",
                    "match": "(?i)^\\s*\\b(define_device|define_constant|define_combine|define_start|define_variable|define_event|define_program|define_toggling|define_mutually_exclusive|define_connect_level|define_type|define_latching)\\b"
                },
                {
                    "name": "meta.section.type.netlinx",
                    "match": "(?i)\\b(structure|struct)\\b\\s+(\\w+)",
                    "captures": {
                        "1": {
                            "name": "storage.type.section.netlinx"
                        },
                        "2": {
                            "name": "entity.name.type.struct.netlinx"
                        }
                    }
                }
            ]
        },
        "procedureDefinitions": {
            "patterns": [
                {
                    "name": "meta.function.definition.netlinx",
                    "match": "(?i)^\\s*\\b(define_function)\\b\\s+(?:(\\w+)(?:\\[(\\d+|\\w+)\\])?\\s+)?([a-zA-Z_][a-zA-Z0-9_]*)",
                    "captures": {
                        "1": { "name": "keyword.declaration.function.netlinx" },
                        "2": { "name": "storage.type.return-type.netlinx" },
                        "3": { "name": "constant.numeric.array-size.netlinx" },
                        "4": { "name": "entity.name.function.netlinx" }
                    }
                },
                {
                    "name": "meta.module.definition.netlinx",
                    "match": "(?i)^\\s*\\b(define_module)\\b\\s+'([^']+)'\\s+([a-zA-Z_][a-zA-Z0-9_]*)",
                    "captures": {
                        "1": { "name": "keyword.declaration.module.netlinx" },
                        "2": {
                            "name": "string.quoted.single.module-name.netlinx"
                        },
                        "3": { "name": "entity.name.module.netlinx" }
                    }
                }
            ]
        },
        "comments": {
            "patterns": [
                {
                    "name": "comment.line.double-slash.netlinx",
                    "match": "(//).*$",
                    "captures": {
                        "1": {
                            "name": "punctuation.definition.comment.netlinx"
                        }
                    }
                },
                {
                    "name": "comment.block.netlinx",
                    "begin": "/\\*",
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.definition.comment.begin.netlinx"
                        }
                    },
                    "end": "\\*/",
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.definition.comment.end.netlinx"
                        }
                    },
                    "patterns": [
                        {
                            "match": "\\*",
                            "name": "punctuation.definition.comment.netlinx"
                        }
                    ]
                }
            ]
        },
        "preprocessor": {
            "patterns": [
                {
                    "name": "meta.preprocessor.include.netlinx",
                    "match": "(?i)(#)(include)\\s+('[^']+')",
                    "captures": {
                        "1": {
                            "name": "keyword.control.directive.include.netlinx"
                        },
                        "2": {
                            "name": "keyword.control.directive.include.netlinx"
                        },
                        "3": {
                            "name": "string.quoted.include.netlinx"
                        }
                    }
                },
                {
                    "name": "meta.preprocessor.include.netlinx",
                    "match": "(?i)\\b(include)\\s+('[^']+')",
                    "captures": {
                        "1": {
                            "name": "keyword.control.directive.include.netlinx"
                        },
                        "2": {
                            "name": "string.quoted.include.netlinx"
                        }
                    }
                },
                {
                    "name": "meta.preprocessor.define.netlinx",
                    "match": "(?i)(#)(define)\\s+([a-zA-Z0-9_]+)",
                    "captures": {
                        "1": {
                            "name": "keyword.control.directive.define.netlinx"
                        },
                        "2": {
                            "name": "keyword.control.directive.define.netlinx"
                        },
                        "3": {
                            "name": "entity.name.constant.preprocessor.netlinx"
                        }
                    }
                },
                {
                    "name": "meta.preprocessor.define.netlinx",
                    "match": "(?i)\\b(define)\\s+([a-zA-Z0-9_]+)",
                    "captures": {
                        "1": {
                            "name": "keyword.control.directive.define.netlinx"
                        },
                        "2": {
                            "name": "entity.name.constant.preprocessor.netlinx"
                        }
                    }
                },
                {
                    "name": "meta.preprocessor.conditional.netlinx",
                    "match": "(?i)(#)(if_defined|if_not_defined|else|end_if)\\b",
                    "captures": {
                        "1": {
                            "name": "keyword.control.directive.conditional.netlinx"
                        },
                        "2": {
                            "name": "keyword.control.directive.conditional.netlinx"
                        }
                    }
                },
                {
                    "name": "meta.preprocessor.conditional.netlinx",
                    "match": "(?i)\\b(if_defined|if_not_defined|else|end_if)\\b",
                    "captures": {
                        "1": {
                            "name": "keyword.control.directive.conditional.netlinx"
                        }
                    }
                },
                {
                    "name": "meta.preprocessor.diagnostic.netlinx",
                    "match": "(?i)(#)(warn)\\b",
                    "captures": {
                        "1": {
                            "name": "keyword.control.directive.diagnostic.netlinx"
                        },
                        "2": {
                            "name": "keyword.control.directive.diagnostic.netlinx"
                        }
                    }
                },
                {
                    "name": "meta.preprocessor.diagnostic.netlinx",
                    "match": "(?i)\\b(warn)\\b",
                    "captures": {
                        "1": {
                            "name": "keyword.control.directive.diagnostic.netlinx"
                        }
                    }
                },
                {
                    "name": "constant.other.preprocessor.netlinx",
                    "match": "(?i)\\b(__netlinx__|__time__|__date__|__ldate__|__file__|__line__|__name__|__version__|___reserved___)\\b"
                }
            ]
        },
        "strings": {
            "patterns": [
                {
                    "name": "string.quoted.single.netlinx",
                    "begin": "'",
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.definition.string.begin.netlinx"
                        }
                    },
                    "end": "'",
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.definition.string.end.netlinx"
                        }
                    },
                    "patterns": [
                        {
                            "name": "constant.character.escape.netlinx",
                            "match": "\\\\."
                        }
                    ]
                },
                {
                    "name": "string.quoted.double.expression.netlinx",
                    "begin": "\"",
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.definition.string.begin.netlinx"
                        }
                    },
                    "end": "\"",
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.definition.string.end.netlinx"
                        }
                    },
                    "patterns": [
                        {
                            "name": "constant.character.escape.netlinx",
                            "match": "\\\\."
                        },
                        {
                            "name": "string.quoted.single.embedded.netlinx",
                            "begin": "'",
                            "end": "'",
                            "patterns": [
                                {
                                    "name": "constant.character.escape.netlinx",
                                    "match": "\\\\."
                                }
                            ]
                        },
                        {
                            "name": "punctuation.separator.string.netlinx",
                            "match": ","
                        },
                        {
                            "name": "variable.other.interpolated.netlinx",
                            "match": "\\b([a-zA-Z_][a-zA-Z0-9_]*(\\.[A-Za-z_][A-Za-z0-9_]*)*)\\b"
                        },
                        {
                            "name": "meta.function-call.netlinx",
                            "match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\s*(?=\\()"
                        }
                    ]
                }
            ]
        },
        "controlFlow": {
            "patterns": [
                {
                    "name": "keyword.control.flow.netlinx",
                    "match": "(?i)\\b(if|else|for|while|switch|case|default|break|continue|return|to|active|select)\\b"
                },
                {
                    "name": "keyword.operator.logical.netlinx",
                    "match": "(?i)\\b(and|or|not)\\b"
                }
            ]
        },
        "constants": {
            "patterns": [
                {
                    "name": "constant.language.boolean.netlinx",
                    "match": "(?i)\\b(true|false)\\b"
                },
                {
                    "name": "constant.language.other.netlinx",
                    "match": "(?i)\\b(on|off|null_str|do_push_timed_infinite)\\b"
                },
                {
                    "name": "constant.language.timeline.netlinx",
                    "match": "(?i)\\b(timeline_once|timeline_repeat|timeline_absolute|timeline_relative)\\b"
                },
                {
                    "name": "constant.numeric.device.netlinx",
                    "match": "\\b([0-9]{1,5}:[0-9]{1,5}:[0-9]{1,5})\\b"
                },
                {
                    "name": "constant.numeric.hex.netlinx",
                    "match": "(?:\\$|0x)[0-9a-fA-F]+"
                },
                {
                    "name": "constant.numeric.float.netlinx",
                    "match": "\\b([0-9]+\\.[0-9]+)\\b"
                },
                {
                    "name": "constant.numeric.decimal.netlinx",
                    "match": "\\b([0-9]+)\\b"
                },
                {
                    "name": "constant.numeric.ip-address.netlinx",
                    "match": "\\b(?:[0-9]{1,3}\\.){3}[0-9]{1,3}\\b"
                }
            ]
        },
        "primitiveTypes": {
            "patterns": [
                {
                    "name": "storage.type.primitive.netlinx",
                    "match": "(?i)\\b(integer|char|long|widechar|sinteger|slong|float|double)\\b"
                }
            ]
        },
        "structuredTypes": {
            "patterns": [
                {
                    "name": "storage.type.structured.netlinx",
                    "match": "(?i)\\b(dev|devchan|devlev|tdata|tchannel|tlevel|ttimeline|tcustom|url_struct|dns_struct|ip_address_struct|dev_info_struct)\\b"
                }
            ]
        },
        "customTypes": {
            "patterns": [
                {
                    "name": "storage.type.structure.netlinx",
                    "match": "(?i)\\b(structure|struct)\\b(?=\\s+[a-zA-Z_][a-zA-Z0-9_]*\\s*\\{)"
                },
                {
                    "name": "meta.structure.netlinx",
                    "begin": "(?i)\\b(struct(?:ure)?)\\s+([a-zA-Z_][a-zA-Z0-9_]*)\\s*\\{",
                    "beginCaptures": {
                        "1": { "name": "storage.type.structure.netlinx" },
                        "2": {
                            "name": "entity.name.type.struct.definition.netlinx"
                        }
                    },
                    "end": "\\}",
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.definition.block.end.netlinx"
                        }
                    },
                    "patterns": [{ "include": "#structFieldDefinition" }]
                },
                {
                    "include": "#primitiveTypeExclusions"
                }
            ]
        },
        "primitiveTypeExclusions": {
            "patterns": [
                {
                    "name": "entity.name.type.struct.usage.netlinx",
                    "match": "(?i)(?<!\\b(?:integer|char|long|widechar|sinteger|slong|float|double|dev|devchan|devlev|volatile|persistent|non_volatile|constant|local_var|stack_var)\\s+)([a-zA-Z_][a-zA-Z0-9_]*)\\b(?=\\s+[a-zA-Z_][a-zA-Z0-9_]*\\s*(?:\\[|;|,))"
                }
            ]
        },
        "structFieldDefinition": {
            "patterns": [
                {
                    "match": "(?i)^\\s*(integer|char|long|widechar|sinteger|slong|float|double|dev|devchan|devlev)\\b\\s+([a-zA-Z_][a-zA-Z0-9_]*)\\s*(?:\\[(\\d+|[a-zA-Z_][a-zA-Z0-9_]*)\\])?\\s*([;])?",
                    "captures": {
                        "1": { "name": "storage.type.primitive.netlinx" },
                        "2": { "name": "variable.other.member.netlinx" },
                        "3": { "name": "constant.numeric.array-size.netlinx" },
                        "4": {
                            "name": "punctuation.terminator.statement.netlinx"
                        }
                    }
                },
                {
                    "match": "(?i)^\\s*([a-zA-Z_][a-zA-Z0-9_]*)\\s+([a-zA-Z_][a-zA-Z0-9_]*)\\s*(?:\\[(\\d+|[a-zA-Z_][a-zA-Z0-9_]*)\\])?\\s*([;])?",
                    "captures": {
                        "1": { "name": "entity.name.type.struct.used.netlinx" },
                        "2": { "name": "variable.other.member.netlinx" },
                        "3": { "name": "constant.numeric.array-size.netlinx" },
                        "4": {
                            "name": "punctuation.terminator.statement.netlinx"
                        }
                    }
                },
                { "include": "#comments" }
            ]
        },
        "storageModifiers": {
            "patterns": [
                { "include": "#globalStorageModifiers" },
                { "include": "#localStorageModifiers" },
                { "include": "#constantModifier" }
            ]
        },
        "globalStorageModifiers": {
            "patterns": [
                {
                    "name": "storage.modifier.global.netlinx",
                    "match": "(?i)\\b(volatile|non_volatile|persistent)\\b"
                }
            ]
        },
        "localStorageModifiers": {
            "patterns": [
                {
                    "name": "storage.modifier.local.netlinx",
                    "match": "(?i)\\b(local_var|stack_var)\\b"
                }
            ]
        },
        "constantModifier": {
            "patterns": [
                {
                    "name": "storage.modifier.constant.netlinx",
                    "match": "(?i)\\b(constant)\\b"
                }
            ]
        },
        "types": {
            "patterns": [
                {
                    "include": "#primitiveTypes"
                },
                {
                    "include": "#structuredTypes"
                },
                {
                    "include": "#customTypes"
                },
                {
                    "include": "#storageModifiers"
                }
            ]
        },
        "operators": {
            "patterns": [
                {
                    "name": "keyword.operator.arithmetic.netlinx",
                    "match": "[\\+\\-\\*/%]|<<|>>"
                },
                {
                    "name": "keyword.operator.assignment.netlinx",
                    "match": "="
                },
                {
                    "name": "keyword.operator.comparison.netlinx",
                    "match": "==|!=|<=|>=|<|>"
                },
                {
                    "name": "keyword.operator.bitwise.netlinx",
                    "match": "&|\\||~|\\^"
                },
                {
                    "name": "keyword.operator.increment.netlinx",
                    "match": "\\+\\+|\\-\\-"
                },
                {
                    "name": "punctuation.definition.bracket.square.netlinx",
                    "match": "[\\[\\]]"
                },
                {
                    "name": "punctuation.definition.bracket.curly.netlinx",
                    "match": "[\\{\\}]"
                },
                {
                    "name": "punctuation.definition.bracket.round.netlinx",
                    "match": "[\\(\\)]"
                },
                {
                    "name": "punctuation.separator.netlinx",
                    "match": "[,;:]"
                }
            ]
        },
        "globalVariables": {
            "patterns": [
                {
                    "name": "meta.variable.declaration.global.netlinx",
                    "match": "(?i)^\\s*\\b(constant\\s+)?(volatile|non_volatile|persistent)\\b\\s+(integer|char|long|widechar|sinteger|slong|float|double|dev|devchan|devlev)\\b\\s+([a-zA-Z_][a-zA-Z0-9_]*)",
                    "captures": {
                        "1": {
                            "patterns": [{ "include": "#constantModifier" }]
                        },
                        "2": {
                            "patterns": [
                                { "include": "#globalStorageModifiers" }
                            ]
                        },
                        "3": { "patterns": [{ "include": "#primitiveTypes" }] },
                        "4": { "name": "variable.other.netlinx" }
                    }
                },
                {
                    "name": "meta.variable.declaration.global.struct.netlinx",
                    "match": "(?i)^\\s*\\b(volatile|persistent|non_volatile)\\b\\s+([a-zA-Z_][a-zA-Z0-9_]*)\\s+([a-zA-Z_][a-zA-Z0-9_]*)",
                    "captures": {
                        "1": {
                            "patterns": [
                                { "include": "#globalStorageModifiers" }
                            ]
                        },
                        "2": { "name": "entity.name.type.struct.used.netlinx" },
                        "3": { "name": "variable.other.netlinx" }
                    }
                },
                {
                    "name": "meta.variable.declaration.global.optional.netlinx",
                    "match": "(?i)^\\s*\\b(constant)\\b\\s+(integer|char|long|widechar|sinteger|slong|float|double|dev|devchan|devlev)\\b\\s+([a-zA-Z_][a-zA-Z0-9_]*)",
                    "captures": {
                        "1": {
                            "patterns": [{ "include": "#constantModifier" }]
                        },
                        "2": { "patterns": [{ "include": "#primitiveTypes" }] },
                        "3": { "name": "variable.other.netlinx" }
                    }
                },
                {
                    "name": "meta.constant.declaration.netlinx",
                    "match": "(?i)^\\s*\\b(constant)\\b\\s+([a-zA-Z_][a-zA-Z0-9_]*)\\s+([a-zA-Z_][a-zA-Z0-9_]*)",
                    "captures": {
                        "1": {
                            "patterns": [{ "include": "#constantModifier" }]
                        },
                        "2": { "name": "entity.name.type.struct.used.netlinx" },
                        "3": { "name": "variable.other.constant.netlinx" }
                    }
                }
            ]
        },
        "localVariables": {
            "patterns": [
                {
                    "name": "meta.variable.declaration.local.netlinx",
                    "match": "(?i)^\\s*\\b(local_var|stack_var|constant)\\b\\s+(integer|char|long|widechar|sinteger|slong|float|double|dev|devchan|devlev)\\b\\s+([a-zA-Z_][a-zA-Z0-9_]*)",
                    "captures": {
                        "1": {
                            "patterns": [
                                { "include": "#localStorageModifiers" }
                            ]
                        },
                        "2": { "patterns": [{ "include": "#primitiveTypes" }] },
                        "3": { "name": "variable.other.netlinx" }
                    }
                },
                {
                    "name": "meta.variable.declaration.local.struct.netlinx",
                    "match": "(?i)^\\s*\\b(local_var|stack_var|constant)\\b\\s+([a-zA-Z_][a-zA-Z0-9_]*)\\s+([a-zA-Z_][a-zA-Z0-9_]*)",
                    "captures": {
                        "1": {
                            "patterns": [
                                { "include": "#localStorageModifiers" }
                            ]
                        },
                        "2": { "name": "entity.name.type.struct.used.netlinx" },
                        "3": { "name": "variable.other.netlinx" }
                    }
                },
                {
                    "name": "meta.variable.parameter.netlinx",
                    "match": "(?i)\\b(integer|char|long|widechar|sinteger|slong|float|double|dev|devchan|devlev)\\b\\s+([a-zA-Z_][a-zA-Z0-9_]*)\\b(?=\\s*(?:,|\\)|\\[))",
                    "captures": {
                        "1": {
                            "name": "storage.type.netlinx"
                        },
                        "2": {
                            "name": "variable.parameter.netlinx"
                        }
                    }
                },
                {
                    "name": "storage.type.struct.parameter.netlinx",
                    "match": "(?i)\\b([a-zA-Z_][a-zA-Z0-9_]*)(?!\\s*\\()\\s+([a-zA-Z_][a-zA-Z0-9_]*)\\b(?=\\s*(?:,|\\)))",
                    "captures": {
                        "1": {
                            "name": "entity.name.type.struct.used.netlinx"
                        },
                        "2": {
                            "name": "variable.parameter.netlinx"
                        }
                    }
                }
            ]
        },
        "variables": {
            "patterns": [
                {
                    "include": "#globalVariables"
                },
                {
                    "include": "#localVariables"
                },
                {
                    "name": "variable.language.netlinx",
                    "match": "(?i)\\b(push_device|push_channel|push_devchan|release_device|release_channel|release_devchan|master_slot|day|date|time|master_sn|system_number|ldate|button|dv_channel|data|level|timeline|channel|custom)\\b"
                },
                {
                    "name": "variable.other.constant.netlinx",
                    "match": "(?i)\\b([A-Z][A-Z0-9_]*)\\b",
                    "captures": {
                        "1": {
                            "name": "variable.other.constant.netlinx"
                        }
                    }
                },
                {
                    "name": "variable.other.netlinx",
                    "match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\b",
                    "captures": {
                        "1": {
                            "name": "variable.other.netlinx"
                        }
                    }
                }
            ]
        }
    }
}
